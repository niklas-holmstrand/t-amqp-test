// source: tpcp0.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.tpcp0.CmdMsg', null, global);
goog.exportSymbol('proto.tpcp0.CmdMsg.PayloadCase', null, global);
goog.exportSymbol('proto.tpcp0.CmdNqrLoadBoard', null, global);
goog.exportSymbol('proto.tpcp0.CmdNqrRemoveBoard', null, global);
goog.exportSymbol('proto.tpcp0.CmdNqrUnloadAnyLoadedBoard', null, global);
goog.exportSymbol('proto.tpcp0.CmdPause', null, global);
goog.exportSymbol('proto.tpcp0.CmdPlay', null, global);
goog.exportSymbol('proto.tpcp0.CmdStartBatch', null, global);
goog.exportSymbol('proto.tpcp0.CmdStop', null, global);
goog.exportSymbol('proto.tpcp0.CmdSwitchToTUI', null, global);
goog.exportSymbol('proto.tpcp0.Dummy', null, global);
goog.exportSymbol('proto.tpcp0.FeederImageReq', null, global);
goog.exportSymbol('proto.tpcp0.FeederImageRsp', null, global);
goog.exportSymbol('proto.tpcp0.MagazineSlot', null, global);
goog.exportSymbol('proto.tpcp0.MagazineSlotState', null, global);
goog.exportSymbol('proto.tpcp0.MagazineStatus', null, global);
goog.exportSymbol('proto.tpcp0.MoveCamXReq', null, global);
goog.exportSymbol('proto.tpcp0.MoveCamXRsp', null, global);
goog.exportSymbol('proto.tpcp0.Notification', null, global);
goog.exportSymbol('proto.tpcp0.NotificationSeverity', null, global);
goog.exportSymbol('proto.tpcp0.NotificationStatus', null, global);
goog.exportSymbol('proto.tpcp0.NotificationType', null, global);
goog.exportSymbol('proto.tpcp0.ProductionEngineState', null, global);
goog.exportSymbol('proto.tpcp0.ProductionEngineStatus', null, global);
goog.exportSymbol('proto.tpcp0.RspMsg', null, global);
goog.exportSymbol('proto.tpcp0.RspMsg.PayloadCase', null, global);
goog.exportSymbol('proto.tpcp0.RspNqrLoadBoard', null, global);
goog.exportSymbol('proto.tpcp0.RspNqrRemoveBoard', null, global);
goog.exportSymbol('proto.tpcp0.RspNqrUnloadAnyLoadedBoard', null, global);
goog.exportSymbol('proto.tpcp0.RspPause', null, global);
goog.exportSymbol('proto.tpcp0.RspPlay', null, global);
goog.exportSymbol('proto.tpcp0.RspStartBatch', null, global);
goog.exportSymbol('proto.tpcp0.RspStop', null, global);
goog.exportSymbol('proto.tpcp0.RspSwitchToTUI', null, global);
goog.exportSymbol('proto.tpcp0.cmdMsgType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.ProductionEngineStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.ProductionEngineStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.ProductionEngineStatus.displayName = 'proto.tpcp0.ProductionEngineStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.MagazineStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tpcp0.MagazineStatus.repeatedFields_, null);
};
goog.inherits(proto.tpcp0.MagazineStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.MagazineStatus.displayName = 'proto.tpcp0.MagazineStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.MagazineSlot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.MagazineSlot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.MagazineSlot.displayName = 'proto.tpcp0.MagazineSlot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.FeederImageRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.FeederImageRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.FeederImageRsp.displayName = 'proto.tpcp0.FeederImageRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.FeederImageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.FeederImageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.FeederImageReq.displayName = 'proto.tpcp0.FeederImageReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.MoveCamXReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.MoveCamXReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.MoveCamXReq.displayName = 'proto.tpcp0.MoveCamXReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.MoveCamXRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.MoveCamXRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.MoveCamXRsp.displayName = 'proto.tpcp0.MoveCamXRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.NotificationStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tpcp0.NotificationStatus.repeatedFields_, null);
};
goog.inherits(proto.tpcp0.NotificationStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.NotificationStatus.displayName = 'proto.tpcp0.NotificationStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.Notification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tpcp0.Notification.repeatedFields_, null);
};
goog.inherits(proto.tpcp0.Notification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.Notification.displayName = 'proto.tpcp0.Notification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.Dummy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.Dummy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.Dummy.displayName = 'proto.tpcp0.Dummy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.CmdMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tpcp0.CmdMsg.oneofGroups_);
};
goog.inherits(proto.tpcp0.CmdMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.CmdMsg.displayName = 'proto.tpcp0.CmdMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.RspMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tpcp0.RspMsg.oneofGroups_);
};
goog.inherits(proto.tpcp0.RspMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.RspMsg.displayName = 'proto.tpcp0.RspMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.CmdStartBatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.CmdStartBatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.CmdStartBatch.displayName = 'proto.tpcp0.CmdStartBatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.RspStartBatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.RspStartBatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.RspStartBatch.displayName = 'proto.tpcp0.RspStartBatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.CmdSwitchToTUI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.CmdSwitchToTUI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.CmdSwitchToTUI.displayName = 'proto.tpcp0.CmdSwitchToTUI';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.RspSwitchToTUI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.RspSwitchToTUI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.RspSwitchToTUI.displayName = 'proto.tpcp0.RspSwitchToTUI';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.CmdPlay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.CmdPlay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.CmdPlay.displayName = 'proto.tpcp0.CmdPlay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.RspPlay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.RspPlay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.RspPlay.displayName = 'proto.tpcp0.RspPlay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.CmdPause = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.CmdPause, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.CmdPause.displayName = 'proto.tpcp0.CmdPause';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.RspPause = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.RspPause, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.RspPause.displayName = 'proto.tpcp0.RspPause';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.CmdStop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.CmdStop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.CmdStop.displayName = 'proto.tpcp0.CmdStop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.RspStop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.RspStop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.RspStop.displayName = 'proto.tpcp0.RspStop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.CmdNqrLoadBoard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.CmdNqrLoadBoard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.CmdNqrLoadBoard.displayName = 'proto.tpcp0.CmdNqrLoadBoard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.RspNqrLoadBoard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.RspNqrLoadBoard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.RspNqrLoadBoard.displayName = 'proto.tpcp0.RspNqrLoadBoard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.CmdNqrRemoveBoard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.CmdNqrRemoveBoard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.CmdNqrRemoveBoard.displayName = 'proto.tpcp0.CmdNqrRemoveBoard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.RspNqrRemoveBoard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.RspNqrRemoveBoard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.RspNqrRemoveBoard.displayName = 'proto.tpcp0.RspNqrRemoveBoard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.CmdNqrUnloadAnyLoadedBoard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.CmdNqrUnloadAnyLoadedBoard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.displayName = 'proto.tpcp0.CmdNqrUnloadAnyLoadedBoard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tpcp0.RspNqrUnloadAnyLoadedBoard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tpcp0.RspNqrUnloadAnyLoadedBoard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tpcp0.RspNqrUnloadAnyLoadedBoard.displayName = 'proto.tpcp0.RspNqrUnloadAnyLoadedBoard';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.ProductionEngineStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.ProductionEngineStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.ProductionEngineStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.ProductionEngineStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    batchid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    layoutname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    batchsize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    boardscompleted: jspb.Message.getFieldWithDefault(msg, 5, 0),
    componentsperboard: jspb.Message.getFieldWithDefault(msg, 6, 0),
    componentsleft: jspb.Message.getFieldWithDefault(msg, 7, 0),
    componentsmissing: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.ProductionEngineStatus}
 */
proto.tpcp0.ProductionEngineStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.ProductionEngineStatus;
  return proto.tpcp0.ProductionEngineStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.ProductionEngineStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.ProductionEngineStatus}
 */
proto.tpcp0.ProductionEngineStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tpcp0.ProductionEngineState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBatchid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLayoutname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBatchsize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBoardscompleted(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setComponentsperboard(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setComponentsleft(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setComponentsmissing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.ProductionEngineStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.ProductionEngineStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.ProductionEngineStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.ProductionEngineStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBatchid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLayoutname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBatchsize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBoardscompleted();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getComponentsperboard();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getComponentsleft();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getComponentsmissing();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional ProductionEngineState state = 1;
 * @return {!proto.tpcp0.ProductionEngineState}
 */
proto.tpcp0.ProductionEngineStatus.prototype.getState = function() {
  return /** @type {!proto.tpcp0.ProductionEngineState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tpcp0.ProductionEngineState} value
 * @return {!proto.tpcp0.ProductionEngineStatus} returns this
 */
proto.tpcp0.ProductionEngineStatus.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string batchId = 2;
 * @return {string}
 */
proto.tpcp0.ProductionEngineStatus.prototype.getBatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.ProductionEngineStatus} returns this
 */
proto.tpcp0.ProductionEngineStatus.prototype.setBatchid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string layoutName = 3;
 * @return {string}
 */
proto.tpcp0.ProductionEngineStatus.prototype.getLayoutname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.ProductionEngineStatus} returns this
 */
proto.tpcp0.ProductionEngineStatus.prototype.setLayoutname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 batchSize = 4;
 * @return {number}
 */
proto.tpcp0.ProductionEngineStatus.prototype.getBatchsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.ProductionEngineStatus} returns this
 */
proto.tpcp0.ProductionEngineStatus.prototype.setBatchsize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 boardsCompleted = 5;
 * @return {number}
 */
proto.tpcp0.ProductionEngineStatus.prototype.getBoardscompleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.ProductionEngineStatus} returns this
 */
proto.tpcp0.ProductionEngineStatus.prototype.setBoardscompleted = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 componentsPerBoard = 6;
 * @return {number}
 */
proto.tpcp0.ProductionEngineStatus.prototype.getComponentsperboard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.ProductionEngineStatus} returns this
 */
proto.tpcp0.ProductionEngineStatus.prototype.setComponentsperboard = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 componentsLeft = 7;
 * @return {number}
 */
proto.tpcp0.ProductionEngineStatus.prototype.getComponentsleft = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.ProductionEngineStatus} returns this
 */
proto.tpcp0.ProductionEngineStatus.prototype.setComponentsleft = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 componentsMissing = 8;
 * @return {number}
 */
proto.tpcp0.ProductionEngineStatus.prototype.getComponentsmissing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.ProductionEngineStatus} returns this
 */
proto.tpcp0.ProductionEngineStatus.prototype.setComponentsmissing = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tpcp0.MagazineStatus.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.MagazineStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.MagazineStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.MagazineStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.MagazineStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    magslotsList: jspb.Message.toObjectList(msg.getMagslotsList(),
    proto.tpcp0.MagazineSlot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.MagazineStatus}
 */
proto.tpcp0.MagazineStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.MagazineStatus;
  return proto.tpcp0.MagazineStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.MagazineStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.MagazineStatus}
 */
proto.tpcp0.MagazineStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tpcp0.MagazineSlot;
      reader.readMessage(value,proto.tpcp0.MagazineSlot.deserializeBinaryFromReader);
      msg.addMagslots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.MagazineStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.MagazineStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.MagazineStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.MagazineStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMagslotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tpcp0.MagazineSlot.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MagazineSlot magSlots = 1;
 * @return {!Array<!proto.tpcp0.MagazineSlot>}
 */
proto.tpcp0.MagazineStatus.prototype.getMagslotsList = function() {
  return /** @type{!Array<!proto.tpcp0.MagazineSlot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tpcp0.MagazineSlot, 1));
};


/**
 * @param {!Array<!proto.tpcp0.MagazineSlot>} value
 * @return {!proto.tpcp0.MagazineStatus} returns this
*/
proto.tpcp0.MagazineStatus.prototype.setMagslotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tpcp0.MagazineSlot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tpcp0.MagazineSlot}
 */
proto.tpcp0.MagazineStatus.prototype.addMagslots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tpcp0.MagazineSlot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tpcp0.MagazineStatus} returns this
 */
proto.tpcp0.MagazineStatus.prototype.clearMagslotsList = function() {
  return this.setMagslotsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.MagazineSlot.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.MagazineSlot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.MagazineSlot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.MagazineSlot.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    slotno: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.MagazineSlot}
 */
proto.tpcp0.MagazineSlot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.MagazineSlot;
  return proto.tpcp0.MagazineSlot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.MagazineSlot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.MagazineSlot}
 */
proto.tpcp0.MagazineSlot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tpcp0.MagazineSlotState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSlotno(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.MagazineSlot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.MagazineSlot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.MagazineSlot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.MagazineSlot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSlotno();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional MagazineSlotState state = 1;
 * @return {!proto.tpcp0.MagazineSlotState}
 */
proto.tpcp0.MagazineSlot.prototype.getState = function() {
  return /** @type {!proto.tpcp0.MagazineSlotState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tpcp0.MagazineSlotState} value
 * @return {!proto.tpcp0.MagazineSlot} returns this
 */
proto.tpcp0.MagazineSlot.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tpcp0.MagazineSlot.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.MagazineSlot} returns this
 */
proto.tpcp0.MagazineSlot.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 slotNo = 3;
 * @return {number}
 */
proto.tpcp0.MagazineSlot.prototype.getSlotno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.MagazineSlot} returns this
 */
proto.tpcp0.MagazineSlot.prototype.setSlotno = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.FeederImageRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.FeederImageRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.FeederImageRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.FeederImageRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    feederimgbase64: jspb.Message.getFieldWithDefault(msg, 1, ""),
    x: jspb.Message.getFieldWithDefault(msg, 2, 0),
    y: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.FeederImageRsp}
 */
proto.tpcp0.FeederImageRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.FeederImageRsp;
  return proto.tpcp0.FeederImageRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.FeederImageRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.FeederImageRsp}
 */
proto.tpcp0.FeederImageRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeederimgbase64(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.FeederImageRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.FeederImageRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.FeederImageRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.FeederImageRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeederimgbase64();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string feederImgBase64 = 1;
 * @return {string}
 */
proto.tpcp0.FeederImageRsp.prototype.getFeederimgbase64 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.FeederImageRsp} returns this
 */
proto.tpcp0.FeederImageRsp.prototype.setFeederimgbase64 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 x = 2;
 * @return {number}
 */
proto.tpcp0.FeederImageRsp.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.FeederImageRsp} returns this
 */
proto.tpcp0.FeederImageRsp.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 y = 3;
 * @return {number}
 */
proto.tpcp0.FeederImageRsp.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.FeederImageRsp} returns this
 */
proto.tpcp0.FeederImageRsp.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.FeederImageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.FeederImageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.FeederImageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.FeederImageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    machineid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: jspb.Message.getFieldWithDefault(msg, 2, 0),
    y: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.FeederImageReq}
 */
proto.tpcp0.FeederImageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.FeederImageReq;
  return proto.tpcp0.FeederImageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.FeederImageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.FeederImageReq}
 */
proto.tpcp0.FeederImageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMachineid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.FeederImageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.FeederImageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.FeederImageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.FeederImageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMachineid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 machineId = 1;
 * @return {number}
 */
proto.tpcp0.FeederImageReq.prototype.getMachineid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.FeederImageReq} returns this
 */
proto.tpcp0.FeederImageReq.prototype.setMachineid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 x = 2;
 * @return {number}
 */
proto.tpcp0.FeederImageReq.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.FeederImageReq} returns this
 */
proto.tpcp0.FeederImageReq.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 y = 3;
 * @return {number}
 */
proto.tpcp0.FeederImageReq.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.FeederImageReq} returns this
 */
proto.tpcp0.FeederImageReq.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.MoveCamXReq.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.MoveCamXReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.MoveCamXReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.MoveCamXReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.MoveCamXReq}
 */
proto.tpcp0.MoveCamXReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.MoveCamXReq;
  return proto.tpcp0.MoveCamXReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.MoveCamXReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.MoveCamXReq}
 */
proto.tpcp0.MoveCamXReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.MoveCamXReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.MoveCamXReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.MoveCamXReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.MoveCamXReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.tpcp0.MoveCamXReq.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.MoveCamXReq} returns this
 */
proto.tpcp0.MoveCamXReq.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.MoveCamXRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.MoveCamXRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.MoveCamXRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.MoveCamXRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.MoveCamXRsp}
 */
proto.tpcp0.MoveCamXRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.MoveCamXRsp;
  return proto.tpcp0.MoveCamXRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.MoveCamXRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.MoveCamXRsp}
 */
proto.tpcp0.MoveCamXRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.MoveCamXRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.MoveCamXRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.MoveCamXRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.MoveCamXRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool result = 1;
 * @return {boolean}
 */
proto.tpcp0.MoveCamXRsp.prototype.getResult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tpcp0.MoveCamXRsp} returns this
 */
proto.tpcp0.MoveCamXRsp.prototype.setResult = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tpcp0.NotificationStatus.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.NotificationStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.NotificationStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.NotificationStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.NotificationStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationsList: jspb.Message.toObjectList(msg.getNotificationsList(),
    proto.tpcp0.Notification.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.NotificationStatus}
 */
proto.tpcp0.NotificationStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.NotificationStatus;
  return proto.tpcp0.NotificationStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.NotificationStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.NotificationStatus}
 */
proto.tpcp0.NotificationStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tpcp0.Notification;
      reader.readMessage(value,proto.tpcp0.Notification.deserializeBinaryFromReader);
      msg.addNotifications(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.NotificationStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.NotificationStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.NotificationStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.NotificationStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tpcp0.Notification.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Notification notifications = 1;
 * @return {!Array<!proto.tpcp0.Notification>}
 */
proto.tpcp0.NotificationStatus.prototype.getNotificationsList = function() {
  return /** @type{!Array<!proto.tpcp0.Notification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tpcp0.Notification, 1));
};


/**
 * @param {!Array<!proto.tpcp0.Notification>} value
 * @return {!proto.tpcp0.NotificationStatus} returns this
*/
proto.tpcp0.NotificationStatus.prototype.setNotificationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tpcp0.Notification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tpcp0.Notification}
 */
proto.tpcp0.NotificationStatus.prototype.addNotifications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tpcp0.Notification, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tpcp0.NotificationStatus} returns this
 */
proto.tpcp0.NotificationStatus.prototype.clearNotificationsList = function() {
  return this.setNotificationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tpcp0.Notification.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.Notification.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.Notification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.Notification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.Notification.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    severity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    runtimedataList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    id: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.Notification}
 */
proto.tpcp0.Notification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.Notification;
  return proto.tpcp0.Notification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.Notification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.Notification}
 */
proto.tpcp0.Notification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tpcp0.NotificationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.tpcp0.NotificationSeverity} */ (reader.readEnum());
      msg.setSeverity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRuntimedata(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.Notification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.Notification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.Notification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.Notification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSeverity();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRuntimedataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional NotificationType type = 1;
 * @return {!proto.tpcp0.NotificationType}
 */
proto.tpcp0.Notification.prototype.getType = function() {
  return /** @type {!proto.tpcp0.NotificationType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tpcp0.NotificationType} value
 * @return {!proto.tpcp0.Notification} returns this
 */
proto.tpcp0.Notification.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional NotificationSeverity severity = 2;
 * @return {!proto.tpcp0.NotificationSeverity}
 */
proto.tpcp0.Notification.prototype.getSeverity = function() {
  return /** @type {!proto.tpcp0.NotificationSeverity} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tpcp0.NotificationSeverity} value
 * @return {!proto.tpcp0.Notification} returns this
 */
proto.tpcp0.Notification.prototype.setSeverity = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated string runtimeData = 3;
 * @return {!Array<string>}
 */
proto.tpcp0.Notification.prototype.getRuntimedataList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tpcp0.Notification} returns this
 */
proto.tpcp0.Notification.prototype.setRuntimedataList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tpcp0.Notification} returns this
 */
proto.tpcp0.Notification.prototype.addRuntimedata = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tpcp0.Notification} returns this
 */
proto.tpcp0.Notification.prototype.clearRuntimedataList = function() {
  return this.setRuntimedataList([]);
};


/**
 * optional int32 id = 4;
 * @return {number}
 */
proto.tpcp0.Notification.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.Notification} returns this
 */
proto.tpcp0.Notification.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.Dummy.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.Dummy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.Dummy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.Dummy.toObject = function(includeInstance, msg) {
  var f, obj = {
    n: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.Dummy}
 */
proto.tpcp0.Dummy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.Dummy;
  return proto.tpcp0.Dummy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.Dummy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.Dummy}
 */
proto.tpcp0.Dummy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setN(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.Dummy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.Dummy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.Dummy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.Dummy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getN();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 n = 1;
 * @return {number}
 */
proto.tpcp0.Dummy.prototype.getN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.Dummy} returns this
 */
proto.tpcp0.Dummy.prototype.setN = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tpcp0.CmdMsg.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.tpcp0.CmdMsg.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CMDSTARTBATCH: 2,
  CMDSWITCHTOTUI: 3,
  CMDPLAY: 4,
  CMDPAUSE: 5,
  CMDSTOP: 6
};

/**
 * @return {proto.tpcp0.CmdMsg.PayloadCase}
 */
proto.tpcp0.CmdMsg.prototype.getPayloadCase = function() {
  return /** @type {proto.tpcp0.CmdMsg.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.tpcp0.CmdMsg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.CmdMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.CmdMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.CmdMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmdtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cmdstartbatch: (f = msg.getCmdstartbatch()) && proto.tpcp0.CmdStartBatch.toObject(includeInstance, f),
    cmdswitchtotui: (f = msg.getCmdswitchtotui()) && proto.tpcp0.CmdSwitchToTUI.toObject(includeInstance, f),
    cmdplay: (f = msg.getCmdplay()) && proto.tpcp0.CmdPlay.toObject(includeInstance, f),
    cmdpause: (f = msg.getCmdpause()) && proto.tpcp0.CmdPause.toObject(includeInstance, f),
    cmdstop: (f = msg.getCmdstop()) && proto.tpcp0.CmdStop.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.CmdMsg}
 */
proto.tpcp0.CmdMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.CmdMsg;
  return proto.tpcp0.CmdMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.CmdMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.CmdMsg}
 */
proto.tpcp0.CmdMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tpcp0.cmdMsgType} */ (reader.readEnum());
      msg.setCmdtype(value);
      break;
    case 2:
      var value = new proto.tpcp0.CmdStartBatch;
      reader.readMessage(value,proto.tpcp0.CmdStartBatch.deserializeBinaryFromReader);
      msg.setCmdstartbatch(value);
      break;
    case 3:
      var value = new proto.tpcp0.CmdSwitchToTUI;
      reader.readMessage(value,proto.tpcp0.CmdSwitchToTUI.deserializeBinaryFromReader);
      msg.setCmdswitchtotui(value);
      break;
    case 4:
      var value = new proto.tpcp0.CmdPlay;
      reader.readMessage(value,proto.tpcp0.CmdPlay.deserializeBinaryFromReader);
      msg.setCmdplay(value);
      break;
    case 5:
      var value = new proto.tpcp0.CmdPause;
      reader.readMessage(value,proto.tpcp0.CmdPause.deserializeBinaryFromReader);
      msg.setCmdpause(value);
      break;
    case 6:
      var value = new proto.tpcp0.CmdStop;
      reader.readMessage(value,proto.tpcp0.CmdStop.deserializeBinaryFromReader);
      msg.setCmdstop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.CmdMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.CmdMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.CmdMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCmdtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCmdstartbatch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tpcp0.CmdStartBatch.serializeBinaryToWriter
    );
  }
  f = message.getCmdswitchtotui();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tpcp0.CmdSwitchToTUI.serializeBinaryToWriter
    );
  }
  f = message.getCmdplay();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tpcp0.CmdPlay.serializeBinaryToWriter
    );
  }
  f = message.getCmdpause();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.tpcp0.CmdPause.serializeBinaryToWriter
    );
  }
  f = message.getCmdstop();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.tpcp0.CmdStop.serializeBinaryToWriter
    );
  }
};


/**
 * optional cmdMsgType cmdType = 1;
 * @return {!proto.tpcp0.cmdMsgType}
 */
proto.tpcp0.CmdMsg.prototype.getCmdtype = function() {
  return /** @type {!proto.tpcp0.cmdMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tpcp0.cmdMsgType} value
 * @return {!proto.tpcp0.CmdMsg} returns this
 */
proto.tpcp0.CmdMsg.prototype.setCmdtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CmdStartBatch cmdStartBatch = 2;
 * @return {?proto.tpcp0.CmdStartBatch}
 */
proto.tpcp0.CmdMsg.prototype.getCmdstartbatch = function() {
  return /** @type{?proto.tpcp0.CmdStartBatch} */ (
    jspb.Message.getWrapperField(this, proto.tpcp0.CmdStartBatch, 2));
};


/**
 * @param {?proto.tpcp0.CmdStartBatch|undefined} value
 * @return {!proto.tpcp0.CmdMsg} returns this
*/
proto.tpcp0.CmdMsg.prototype.setCmdstartbatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.tpcp0.CmdMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tpcp0.CmdMsg} returns this
 */
proto.tpcp0.CmdMsg.prototype.clearCmdstartbatch = function() {
  return this.setCmdstartbatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tpcp0.CmdMsg.prototype.hasCmdstartbatch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CmdSwitchToTUI cmdSwitchToTUI = 3;
 * @return {?proto.tpcp0.CmdSwitchToTUI}
 */
proto.tpcp0.CmdMsg.prototype.getCmdswitchtotui = function() {
  return /** @type{?proto.tpcp0.CmdSwitchToTUI} */ (
    jspb.Message.getWrapperField(this, proto.tpcp0.CmdSwitchToTUI, 3));
};


/**
 * @param {?proto.tpcp0.CmdSwitchToTUI|undefined} value
 * @return {!proto.tpcp0.CmdMsg} returns this
*/
proto.tpcp0.CmdMsg.prototype.setCmdswitchtotui = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.tpcp0.CmdMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tpcp0.CmdMsg} returns this
 */
proto.tpcp0.CmdMsg.prototype.clearCmdswitchtotui = function() {
  return this.setCmdswitchtotui(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tpcp0.CmdMsg.prototype.hasCmdswitchtotui = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CmdPlay cmdPlay = 4;
 * @return {?proto.tpcp0.CmdPlay}
 */
proto.tpcp0.CmdMsg.prototype.getCmdplay = function() {
  return /** @type{?proto.tpcp0.CmdPlay} */ (
    jspb.Message.getWrapperField(this, proto.tpcp0.CmdPlay, 4));
};


/**
 * @param {?proto.tpcp0.CmdPlay|undefined} value
 * @return {!proto.tpcp0.CmdMsg} returns this
*/
proto.tpcp0.CmdMsg.prototype.setCmdplay = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.tpcp0.CmdMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tpcp0.CmdMsg} returns this
 */
proto.tpcp0.CmdMsg.prototype.clearCmdplay = function() {
  return this.setCmdplay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tpcp0.CmdMsg.prototype.hasCmdplay = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CmdPause cmdPause = 5;
 * @return {?proto.tpcp0.CmdPause}
 */
proto.tpcp0.CmdMsg.prototype.getCmdpause = function() {
  return /** @type{?proto.tpcp0.CmdPause} */ (
    jspb.Message.getWrapperField(this, proto.tpcp0.CmdPause, 5));
};


/**
 * @param {?proto.tpcp0.CmdPause|undefined} value
 * @return {!proto.tpcp0.CmdMsg} returns this
*/
proto.tpcp0.CmdMsg.prototype.setCmdpause = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.tpcp0.CmdMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tpcp0.CmdMsg} returns this
 */
proto.tpcp0.CmdMsg.prototype.clearCmdpause = function() {
  return this.setCmdpause(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tpcp0.CmdMsg.prototype.hasCmdpause = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CmdStop cmdStop = 6;
 * @return {?proto.tpcp0.CmdStop}
 */
proto.tpcp0.CmdMsg.prototype.getCmdstop = function() {
  return /** @type{?proto.tpcp0.CmdStop} */ (
    jspb.Message.getWrapperField(this, proto.tpcp0.CmdStop, 6));
};


/**
 * @param {?proto.tpcp0.CmdStop|undefined} value
 * @return {!proto.tpcp0.CmdMsg} returns this
*/
proto.tpcp0.CmdMsg.prototype.setCmdstop = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.tpcp0.CmdMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tpcp0.CmdMsg} returns this
 */
proto.tpcp0.CmdMsg.prototype.clearCmdstop = function() {
  return this.setCmdstop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tpcp0.CmdMsg.prototype.hasCmdstop = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tpcp0.RspMsg.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.tpcp0.RspMsg.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  RSPSTARTBATCH: 2,
  RSPSWITCHTOTUI: 3,
  RSPPLAY: 4,
  RSPPAUSE: 5,
  RSPSTOP: 6
};

/**
 * @return {proto.tpcp0.RspMsg.PayloadCase}
 */
proto.tpcp0.RspMsg.prototype.getPayloadCase = function() {
  return /** @type {proto.tpcp0.RspMsg.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.tpcp0.RspMsg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.RspMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.RspMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.RspMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmdtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rspstartbatch: (f = msg.getRspstartbatch()) && proto.tpcp0.RspStartBatch.toObject(includeInstance, f),
    rspswitchtotui: (f = msg.getRspswitchtotui()) && proto.tpcp0.RspSwitchToTUI.toObject(includeInstance, f),
    rspplay: (f = msg.getRspplay()) && proto.tpcp0.RspPlay.toObject(includeInstance, f),
    rsppause: (f = msg.getRsppause()) && proto.tpcp0.RspPause.toObject(includeInstance, f),
    rspstop: (f = msg.getRspstop()) && proto.tpcp0.RspStop.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.RspMsg}
 */
proto.tpcp0.RspMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.RspMsg;
  return proto.tpcp0.RspMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.RspMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.RspMsg}
 */
proto.tpcp0.RspMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tpcp0.cmdMsgType} */ (reader.readEnum());
      msg.setCmdtype(value);
      break;
    case 2:
      var value = new proto.tpcp0.RspStartBatch;
      reader.readMessage(value,proto.tpcp0.RspStartBatch.deserializeBinaryFromReader);
      msg.setRspstartbatch(value);
      break;
    case 3:
      var value = new proto.tpcp0.RspSwitchToTUI;
      reader.readMessage(value,proto.tpcp0.RspSwitchToTUI.deserializeBinaryFromReader);
      msg.setRspswitchtotui(value);
      break;
    case 4:
      var value = new proto.tpcp0.RspPlay;
      reader.readMessage(value,proto.tpcp0.RspPlay.deserializeBinaryFromReader);
      msg.setRspplay(value);
      break;
    case 5:
      var value = new proto.tpcp0.RspPause;
      reader.readMessage(value,proto.tpcp0.RspPause.deserializeBinaryFromReader);
      msg.setRsppause(value);
      break;
    case 6:
      var value = new proto.tpcp0.RspStop;
      reader.readMessage(value,proto.tpcp0.RspStop.deserializeBinaryFromReader);
      msg.setRspstop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.RspMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.RspMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.RspMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCmdtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRspstartbatch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tpcp0.RspStartBatch.serializeBinaryToWriter
    );
  }
  f = message.getRspswitchtotui();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tpcp0.RspSwitchToTUI.serializeBinaryToWriter
    );
  }
  f = message.getRspplay();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tpcp0.RspPlay.serializeBinaryToWriter
    );
  }
  f = message.getRsppause();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.tpcp0.RspPause.serializeBinaryToWriter
    );
  }
  f = message.getRspstop();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.tpcp0.RspStop.serializeBinaryToWriter
    );
  }
};


/**
 * optional cmdMsgType cmdType = 1;
 * @return {!proto.tpcp0.cmdMsgType}
 */
proto.tpcp0.RspMsg.prototype.getCmdtype = function() {
  return /** @type {!proto.tpcp0.cmdMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tpcp0.cmdMsgType} value
 * @return {!proto.tpcp0.RspMsg} returns this
 */
proto.tpcp0.RspMsg.prototype.setCmdtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional RspStartBatch rspStartBatch = 2;
 * @return {?proto.tpcp0.RspStartBatch}
 */
proto.tpcp0.RspMsg.prototype.getRspstartbatch = function() {
  return /** @type{?proto.tpcp0.RspStartBatch} */ (
    jspb.Message.getWrapperField(this, proto.tpcp0.RspStartBatch, 2));
};


/**
 * @param {?proto.tpcp0.RspStartBatch|undefined} value
 * @return {!proto.tpcp0.RspMsg} returns this
*/
proto.tpcp0.RspMsg.prototype.setRspstartbatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.tpcp0.RspMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tpcp0.RspMsg} returns this
 */
proto.tpcp0.RspMsg.prototype.clearRspstartbatch = function() {
  return this.setRspstartbatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tpcp0.RspMsg.prototype.hasRspstartbatch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RspSwitchToTUI rspSwitchToTUI = 3;
 * @return {?proto.tpcp0.RspSwitchToTUI}
 */
proto.tpcp0.RspMsg.prototype.getRspswitchtotui = function() {
  return /** @type{?proto.tpcp0.RspSwitchToTUI} */ (
    jspb.Message.getWrapperField(this, proto.tpcp0.RspSwitchToTUI, 3));
};


/**
 * @param {?proto.tpcp0.RspSwitchToTUI|undefined} value
 * @return {!proto.tpcp0.RspMsg} returns this
*/
proto.tpcp0.RspMsg.prototype.setRspswitchtotui = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.tpcp0.RspMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tpcp0.RspMsg} returns this
 */
proto.tpcp0.RspMsg.prototype.clearRspswitchtotui = function() {
  return this.setRspswitchtotui(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tpcp0.RspMsg.prototype.hasRspswitchtotui = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RspPlay rspPlay = 4;
 * @return {?proto.tpcp0.RspPlay}
 */
proto.tpcp0.RspMsg.prototype.getRspplay = function() {
  return /** @type{?proto.tpcp0.RspPlay} */ (
    jspb.Message.getWrapperField(this, proto.tpcp0.RspPlay, 4));
};


/**
 * @param {?proto.tpcp0.RspPlay|undefined} value
 * @return {!proto.tpcp0.RspMsg} returns this
*/
proto.tpcp0.RspMsg.prototype.setRspplay = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.tpcp0.RspMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tpcp0.RspMsg} returns this
 */
proto.tpcp0.RspMsg.prototype.clearRspplay = function() {
  return this.setRspplay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tpcp0.RspMsg.prototype.hasRspplay = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RspPause rspPause = 5;
 * @return {?proto.tpcp0.RspPause}
 */
proto.tpcp0.RspMsg.prototype.getRsppause = function() {
  return /** @type{?proto.tpcp0.RspPause} */ (
    jspb.Message.getWrapperField(this, proto.tpcp0.RspPause, 5));
};


/**
 * @param {?proto.tpcp0.RspPause|undefined} value
 * @return {!proto.tpcp0.RspMsg} returns this
*/
proto.tpcp0.RspMsg.prototype.setRsppause = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.tpcp0.RspMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tpcp0.RspMsg} returns this
 */
proto.tpcp0.RspMsg.prototype.clearRsppause = function() {
  return this.setRsppause(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tpcp0.RspMsg.prototype.hasRsppause = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RspStop rspStop = 6;
 * @return {?proto.tpcp0.RspStop}
 */
proto.tpcp0.RspMsg.prototype.getRspstop = function() {
  return /** @type{?proto.tpcp0.RspStop} */ (
    jspb.Message.getWrapperField(this, proto.tpcp0.RspStop, 6));
};


/**
 * @param {?proto.tpcp0.RspStop|undefined} value
 * @return {!proto.tpcp0.RspMsg} returns this
*/
proto.tpcp0.RspMsg.prototype.setRspstop = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.tpcp0.RspMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tpcp0.RspMsg} returns this
 */
proto.tpcp0.RspMsg.prototype.clearRspstop = function() {
  return this.setRspstop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tpcp0.RspMsg.prototype.hasRspstop = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.CmdStartBatch.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.CmdStartBatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.CmdStartBatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdStartBatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    layoutname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    batchsize: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.CmdStartBatch}
 */
proto.tpcp0.CmdStartBatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.CmdStartBatch;
  return proto.tpcp0.CmdStartBatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.CmdStartBatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.CmdStartBatch}
 */
proto.tpcp0.CmdStartBatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBatchid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLayoutname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBatchsize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.CmdStartBatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.CmdStartBatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.CmdStartBatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdStartBatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLayoutname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBatchsize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string batchId = 1;
 * @return {string}
 */
proto.tpcp0.CmdStartBatch.prototype.getBatchid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.CmdStartBatch} returns this
 */
proto.tpcp0.CmdStartBatch.prototype.setBatchid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string layoutName = 2;
 * @return {string}
 */
proto.tpcp0.CmdStartBatch.prototype.getLayoutname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.CmdStartBatch} returns this
 */
proto.tpcp0.CmdStartBatch.prototype.setLayoutname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 batchSize = 3;
 * @return {number}
 */
proto.tpcp0.CmdStartBatch.prototype.getBatchsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.CmdStartBatch} returns this
 */
proto.tpcp0.CmdStartBatch.prototype.setBatchsize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.RspStartBatch.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.RspStartBatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.RspStartBatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspStartBatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errmsg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.RspStartBatch}
 */
proto.tpcp0.RspStartBatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.RspStartBatch;
  return proto.tpcp0.RspStartBatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.RspStartBatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.RspStartBatch}
 */
proto.tpcp0.RspStartBatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.RspStartBatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.RspStartBatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.RspStartBatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspStartBatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.tpcp0.RspStartBatch.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.RspStartBatch} returns this
 */
proto.tpcp0.RspStartBatch.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string errMsg = 2;
 * @return {string}
 */
proto.tpcp0.RspStartBatch.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.RspStartBatch} returns this
 */
proto.tpcp0.RspStartBatch.prototype.setErrmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.CmdSwitchToTUI.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.CmdSwitchToTUI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.CmdSwitchToTUI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdSwitchToTUI.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.CmdSwitchToTUI}
 */
proto.tpcp0.CmdSwitchToTUI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.CmdSwitchToTUI;
  return proto.tpcp0.CmdSwitchToTUI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.CmdSwitchToTUI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.CmdSwitchToTUI}
 */
proto.tpcp0.CmdSwitchToTUI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.CmdSwitchToTUI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.CmdSwitchToTUI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.CmdSwitchToTUI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdSwitchToTUI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.RspSwitchToTUI.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.RspSwitchToTUI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.RspSwitchToTUI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspSwitchToTUI.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errmsg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.RspSwitchToTUI}
 */
proto.tpcp0.RspSwitchToTUI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.RspSwitchToTUI;
  return proto.tpcp0.RspSwitchToTUI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.RspSwitchToTUI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.RspSwitchToTUI}
 */
proto.tpcp0.RspSwitchToTUI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.RspSwitchToTUI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.RspSwitchToTUI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.RspSwitchToTUI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspSwitchToTUI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.tpcp0.RspSwitchToTUI.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.RspSwitchToTUI} returns this
 */
proto.tpcp0.RspSwitchToTUI.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string errMsg = 2;
 * @return {string}
 */
proto.tpcp0.RspSwitchToTUI.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.RspSwitchToTUI} returns this
 */
proto.tpcp0.RspSwitchToTUI.prototype.setErrmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.CmdPlay.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.CmdPlay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.CmdPlay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdPlay.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.CmdPlay}
 */
proto.tpcp0.CmdPlay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.CmdPlay;
  return proto.tpcp0.CmdPlay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.CmdPlay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.CmdPlay}
 */
proto.tpcp0.CmdPlay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.CmdPlay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.CmdPlay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.CmdPlay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdPlay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.RspPlay.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.RspPlay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.RspPlay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspPlay.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errmsg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.RspPlay}
 */
proto.tpcp0.RspPlay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.RspPlay;
  return proto.tpcp0.RspPlay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.RspPlay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.RspPlay}
 */
proto.tpcp0.RspPlay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.RspPlay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.RspPlay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.RspPlay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspPlay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.tpcp0.RspPlay.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.RspPlay} returns this
 */
proto.tpcp0.RspPlay.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string errMsg = 2;
 * @return {string}
 */
proto.tpcp0.RspPlay.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.RspPlay} returns this
 */
proto.tpcp0.RspPlay.prototype.setErrmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.CmdPause.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.CmdPause.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.CmdPause} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdPause.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.CmdPause}
 */
proto.tpcp0.CmdPause.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.CmdPause;
  return proto.tpcp0.CmdPause.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.CmdPause} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.CmdPause}
 */
proto.tpcp0.CmdPause.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.CmdPause.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.CmdPause.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.CmdPause} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdPause.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.RspPause.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.RspPause.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.RspPause} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspPause.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errmsg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.RspPause}
 */
proto.tpcp0.RspPause.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.RspPause;
  return proto.tpcp0.RspPause.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.RspPause} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.RspPause}
 */
proto.tpcp0.RspPause.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.RspPause.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.RspPause.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.RspPause} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspPause.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.tpcp0.RspPause.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.RspPause} returns this
 */
proto.tpcp0.RspPause.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string errMsg = 2;
 * @return {string}
 */
proto.tpcp0.RspPause.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.RspPause} returns this
 */
proto.tpcp0.RspPause.prototype.setErrmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.CmdStop.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.CmdStop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.CmdStop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdStop.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.CmdStop}
 */
proto.tpcp0.CmdStop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.CmdStop;
  return proto.tpcp0.CmdStop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.CmdStop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.CmdStop}
 */
proto.tpcp0.CmdStop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.CmdStop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.CmdStop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.CmdStop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdStop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.RspStop.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.RspStop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.RspStop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspStop.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errmsg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.RspStop}
 */
proto.tpcp0.RspStop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.RspStop;
  return proto.tpcp0.RspStop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.RspStop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.RspStop}
 */
proto.tpcp0.RspStop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.RspStop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.RspStop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.RspStop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspStop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.tpcp0.RspStop.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.RspStop} returns this
 */
proto.tpcp0.RspStop.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string errMsg = 2;
 * @return {string}
 */
proto.tpcp0.RspStop.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.RspStop} returns this
 */
proto.tpcp0.RspStop.prototype.setErrmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.CmdNqrLoadBoard.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.CmdNqrLoadBoard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.CmdNqrLoadBoard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdNqrLoadBoard.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.CmdNqrLoadBoard}
 */
proto.tpcp0.CmdNqrLoadBoard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.CmdNqrLoadBoard;
  return proto.tpcp0.CmdNqrLoadBoard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.CmdNqrLoadBoard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.CmdNqrLoadBoard}
 */
proto.tpcp0.CmdNqrLoadBoard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.CmdNqrLoadBoard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.CmdNqrLoadBoard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.CmdNqrLoadBoard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdNqrLoadBoard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.tpcp0.CmdNqrLoadBoard.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tpcp0.CmdNqrLoadBoard} returns this
 */
proto.tpcp0.CmdNqrLoadBoard.prototype.setOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.RspNqrLoadBoard.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.RspNqrLoadBoard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.RspNqrLoadBoard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspNqrLoadBoard.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errmsg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.RspNqrLoadBoard}
 */
proto.tpcp0.RspNqrLoadBoard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.RspNqrLoadBoard;
  return proto.tpcp0.RspNqrLoadBoard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.RspNqrLoadBoard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.RspNqrLoadBoard}
 */
proto.tpcp0.RspNqrLoadBoard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.RspNqrLoadBoard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.RspNqrLoadBoard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.RspNqrLoadBoard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspNqrLoadBoard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.tpcp0.RspNqrLoadBoard.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.RspNqrLoadBoard} returns this
 */
proto.tpcp0.RspNqrLoadBoard.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string errMsg = 2;
 * @return {string}
 */
proto.tpcp0.RspNqrLoadBoard.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.RspNqrLoadBoard} returns this
 */
proto.tpcp0.RspNqrLoadBoard.prototype.setErrmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.CmdNqrRemoveBoard.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.CmdNqrRemoveBoard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.CmdNqrRemoveBoard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdNqrRemoveBoard.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.CmdNqrRemoveBoard}
 */
proto.tpcp0.CmdNqrRemoveBoard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.CmdNqrRemoveBoard;
  return proto.tpcp0.CmdNqrRemoveBoard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.CmdNqrRemoveBoard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.CmdNqrRemoveBoard}
 */
proto.tpcp0.CmdNqrRemoveBoard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.CmdNqrRemoveBoard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.CmdNqrRemoveBoard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.CmdNqrRemoveBoard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdNqrRemoveBoard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.RspNqrRemoveBoard.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.RspNqrRemoveBoard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.RspNqrRemoveBoard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspNqrRemoveBoard.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errmsg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.RspNqrRemoveBoard}
 */
proto.tpcp0.RspNqrRemoveBoard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.RspNqrRemoveBoard;
  return proto.tpcp0.RspNqrRemoveBoard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.RspNqrRemoveBoard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.RspNqrRemoveBoard}
 */
proto.tpcp0.RspNqrRemoveBoard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.RspNqrRemoveBoard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.RspNqrRemoveBoard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.RspNqrRemoveBoard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspNqrRemoveBoard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.tpcp0.RspNqrRemoveBoard.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.RspNqrRemoveBoard} returns this
 */
proto.tpcp0.RspNqrRemoveBoard.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string errMsg = 2;
 * @return {string}
 */
proto.tpcp0.RspNqrRemoveBoard.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.RspNqrRemoveBoard} returns this
 */
proto.tpcp0.RspNqrRemoveBoard.prototype.setErrmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.CmdNqrUnloadAnyLoadedBoard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    boardtounloadexists: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.CmdNqrUnloadAnyLoadedBoard}
 */
proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.CmdNqrUnloadAnyLoadedBoard;
  return proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.CmdNqrUnloadAnyLoadedBoard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.CmdNqrUnloadAnyLoadedBoard}
 */
proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoardtounloadexists(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.CmdNqrUnloadAnyLoadedBoard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getBoardtounloadexists();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tpcp0.CmdNqrUnloadAnyLoadedBoard} returns this
 */
proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.prototype.setOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool boardToUnloadExists = 2;
 * @return {boolean}
 */
proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.prototype.getBoardtounloadexists = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tpcp0.CmdNqrUnloadAnyLoadedBoard} returns this
 */
proto.tpcp0.CmdNqrUnloadAnyLoadedBoard.prototype.setBoardtounloadexists = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tpcp0.RspNqrUnloadAnyLoadedBoard.prototype.toObject = function(opt_includeInstance) {
  return proto.tpcp0.RspNqrUnloadAnyLoadedBoard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tpcp0.RspNqrUnloadAnyLoadedBoard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspNqrUnloadAnyLoadedBoard.toObject = function(includeInstance, msg) {
  var f, obj = {
    errcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errmsg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tpcp0.RspNqrUnloadAnyLoadedBoard}
 */
proto.tpcp0.RspNqrUnloadAnyLoadedBoard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tpcp0.RspNqrUnloadAnyLoadedBoard;
  return proto.tpcp0.RspNqrUnloadAnyLoadedBoard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tpcp0.RspNqrUnloadAnyLoadedBoard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tpcp0.RspNqrUnloadAnyLoadedBoard}
 */
proto.tpcp0.RspNqrUnloadAnyLoadedBoard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tpcp0.RspNqrUnloadAnyLoadedBoard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tpcp0.RspNqrUnloadAnyLoadedBoard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tpcp0.RspNqrUnloadAnyLoadedBoard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tpcp0.RspNqrUnloadAnyLoadedBoard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 errCode = 1;
 * @return {number}
 */
proto.tpcp0.RspNqrUnloadAnyLoadedBoard.prototype.getErrcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tpcp0.RspNqrUnloadAnyLoadedBoard} returns this
 */
proto.tpcp0.RspNqrUnloadAnyLoadedBoard.prototype.setErrcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string errMsg = 2;
 * @return {string}
 */
proto.tpcp0.RspNqrUnloadAnyLoadedBoard.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tpcp0.RspNqrUnloadAnyLoadedBoard} returns this
 */
proto.tpcp0.RspNqrUnloadAnyLoadedBoard.prototype.setErrmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.tpcp0.ProductionEngineState = {
  UNKNOWN: 0,
  STOPPED: 1,
  PAUSED: 2,
  RUNNING: 3
};

/**
 * @enum {number}
 */
proto.tpcp0.MagazineSlotState = {
  UNKNOWNMAGAZINESLOTSTATE: 0,
  EMPTY: 1,
  PRESENT: 2,
  ACTIVE: 3,
  USED: 4,
  NOTYETPICKED: 5
};

/**
 * @enum {number}
 */
proto.tpcp0.NotificationType = {
  UNKNOWNNOTIFICATIONTYPE: 0,
  LOADBOARDREQUEST: 1,
  REMOVEBOARDREQUEST: 2,
  UNLOADANYLOADEDBOARDREQUEST: 3,
  COMPONENTNOTAVAILABLE: 4,
  COMPONENTNOHYDRATOOL: 5,
  WAITINGFORBOARDTOBELOADED: 6,
  WAITINGFORBOARDTOBEUNLOADED: 7,
  WAITINGFORBOARDTOBECHANGED: 8,
  UNKNOWNOPERATORALERT: 9,
  IOCONVEYORERRORLEFT: 10,
  IOCONVEYORERRORRIGHT: 11,
  TIMEFORPREVENTIVEMAINTENENCE: 12,
  VISIONDISABLED: 13
};

/**
 * @enum {number}
 */
proto.tpcp0.NotificationSeverity = {
  UNKNOWNNOTIFICATIONSEVERITY: 0,
  OPERATORALERT: 1,
  QUERY: 2,
  OPERATORINFO: 3
};

/**
 * @enum {number}
 */
proto.tpcp0.cmdMsgType = {
  CMDSTARTBATCHTYPE: 0,
  CMDSWITCHTOTUITYPE: 1,
  CMDPLAYTYPE: 2,
  CMDPAUSETYPE: 3,
  CMDSTOPTYPE: 4
};

goog.object.extend(exports, proto.tpcp0);
